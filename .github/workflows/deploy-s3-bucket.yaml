name: Deploy AWS Resources

on:
  push:
    branches:
      - Dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      VPC_NAME: my-demo-vpc
      S3_BUCKET_NAME: my-demo-s3-bucket-test-project-18
      EC2_INSTANCE_NAME: my-demo-ec2-instance
      LAMBDA_FUNCTION_NAME: my-demo-lambda-function
      LAMBDA_CODE_BUCKET: my-demo-s3-bucket-test-project-11
      LAMBDA_CODE_KEY: lambda-code.zip

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check if VPC stack is in ROLLBACK_COMPLETE state
      id: check_vpc_stack
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name create-vpc-stack --query "Stacks[0].StackStatus" --output text || echo "STACK_NOT_FOUND")
        echo "::set-output name=stack_status::$STACK_STATUS"

    - name: Delete VPC stack if in ROLLBACK_COMPLETE state
      if: steps.check_vpc_stack.outputs.stack_status == 'ROLLBACK_COMPLETE'
      run: |
        aws cloudformation delete-stack --stack-name create-vpc-stack
        aws cloudformation wait stack-delete-complete --stack-name create-vpc-stack

    - name: Deploy VPC Stack
      run: |
        aws cloudformation deploy \
          --template-file Resources/vpc.yaml \
          --stack-name create-vpc-stack \
          --parameter-overrides VPCName=${{ env.VPC_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Check if S3 stack is in ROLLBACK_COMPLETE state
      id: check_s3_stack
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name create-s3-bucket-stack --query "Stacks[0].StackStatus" --output text || echo "STACK_NOT_FOUND")
        echo "::set-output name=stack_status::$STACK_STATUS"

    - name: Delete S3 stack if in ROLLBACK_COMPLETE state
      if: steps.check_s3_stack.outputs.stack_status == 'ROLLBACK_COMPLETE'
      run: |
        aws cloudformation delete-stack --stack-name create-s3-bucket-stack
        aws cloudformation wait stack-delete-complete --stack-name create-s3-bucket-stack

    - name: Deploy S3 Bucket Stack
      run: |
        aws cloudformation deploy \
          --template-file Resources/create-s3-bucket.yaml \
          --stack-name create-s3-bucket-stack \
          --parameter-overrides BucketName=${{ env.S3_BUCKET_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Verify S3 Bucket Creation
      run: |
        aws s3 ls s3://${{ env.S3_BUCKET_NAME }} || echo "Bucket does not exist or access denied"

    - name: Check if EC2 stack is in ROLLBACK_COMPLETE state
      id: check_ec2_stack
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name create-ec2-instance-stack --query "Stacks[0].StackStatus" --output text || echo "STACK_NOT_FOUND")
        echo "::set-output name=stack_status::$STACK_STATUS"

    - name: Delete EC2 stack if in ROLLBACK_COMPLETE state
      if: steps.check_ec2_stack.outputs.stack_status == 'ROLLBACK_COMPLETE'
      run: |
        aws cloudformation delete-stack --stack-name create-ec2-instance-stack
        aws cloudformation wait stack-delete-complete --stack-name create-ec2-instance-stack

    - name: Deploy EC2 Instance Stack
      run: |
        aws cloudformation deploy \
          --template-file Resources/ec2.yaml \
          --stack-name create-ec2-instance-stack \
          --parameter-overrides EC2InstanceName=${{ env.EC2_INSTANCE_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Verify EC2 Instance Creation
      run: |
        aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text || echo "Instance does not exist or access denied"

    - name: Check if Lambda stack is in ROLLBACK_COMPLETE state
      id: check_lambda_stack
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name create-lambda-stack --query "Stacks[0].StackStatus" --output text || echo "STACK_NOT_FOUND")
        echo "::set-output name=stack_status::$STACK_STATUS"

    - name: Delete Lambda stack if in ROLLBACK_COMPLETE state
      if: steps.check_lambda_stack.outputs.stack_status == 'ROLLBACK_COMPLETE'
      run: |
        aws cloudformation delete-stack --stack-name create-lambda-stack
        aws cloudformation wait stack-delete-complete --stack-name create-lambda-stack

    - name: Create Lambda zip
      run: |
        mkdir lambda-function
        echo "exports.handler = async (event) => { console.log('Event:', event); return { statusCode: 200, body: JSON.stringify('Hello from Lambda!') }; };" > lambda-function/index.js
        cd lambda-function
        zip -r lambda-code.zip .
        cd ..
        mv lambda-function/lambda-code.zip .

    - name: Upload Lambda Code to S3
      run: |
        aws s3 cp lambda-code.zip s3://${{ env.LAMBDA_CODE_BUCKET }}/lambda-code.zip

    - name: Deploy Lambda Function Stack
      run: |
        aws cloudformation deploy \
          --template-file Resources/lambda.yaml \
          --stack-name create-lambda-stack \
          --parameter-overrides LambdaFunctionName=${{ env.LAMBDA_FUNCTION_NAME }} LambdaCodeBucket=${{ env.LAMBDA_CODE_BUCKET }} LambdaCodeKey=${{ env.LAMBDA_CODE_KEY }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Verify Lambda Function Creation
      run: |
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} || echo "Function does not exist or access denied"