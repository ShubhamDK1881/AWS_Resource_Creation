name: Deploy AWS Resources

on:
  push:
    branches:
      - Dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify S3 Access
        run: |
          aws s3 ls || echo "Access to S3 service is denied"

      - name: Delete Failed S3 Bucket Stack if Exists
        run: |
          aws cloudformation delete-stack --stack-name ${{ secrets.S3_BUCKET_STACK_NAME }} || true
          aws cloudformation wait stack-delete-complete --stack-name ${{ secrets.S3_BUCKET_STACK_NAME }} || true

      - name: Deploy S3 Bucket Stack
        run: |
          aws cloudformation deploy \
            --template-file Resources/s3.yaml \
            --stack-name ${{ secrets.S3_BUCKET_STACK_NAME }} \
            --parameter-overrides \
              S3BucketName=${{ secrets.S3_BUCKET_NAME }} \
              AccessControl=${{ secrets.S3_ACCESS_CONTROL }} \
              VersioningStatus=${{ secrets.S3_VERSIONING_STATUS }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Upload nested stack templates to S3
        run: |
          aws s3 cp ./Resources/vpc.yaml s3://${{ secrets.S3_BUCKET_NAME }}/vpc.yaml
          aws s3 cp ./Resources/s3.yaml s3://${{ secrets.S3_BUCKET_NAME }}/s3.yaml
          aws s3 cp ./Resources/ec2.yaml s3://${{ secrets.S3_BUCKET_NAME }}/ec2.yaml
          aws s3 cp ./Resources/iam-role.yaml s3://${{ secrets.S3_BUCKET_NAME }}/iam-role.yaml
          aws s3 cp ./Resources/lambda.yaml s3://${{ secrets.S3_BUCKET_NAME }}/lambda.yaml
          aws s3 cp ./parameters/parameters-dev.json s3://${{ secrets.S3_BUCKET_NAME }}/parameters-dev.json
          aws s3 cp ./parameters/parameters-prod.json s3://${{ secrets.S3_BUCKET_NAME }}/parameters-prod.json

      - name: Create Lambda zip
        run: |
          mkdir -p lambda-function
          echo "exports.handler = async (event) => { console.log('Event:', event); return { statusCode: 200, body: JSON.stringify('Hello from Lambda!') }; };" > lambda-function/index.js
          cd lambda-function
          zip -r lambda-code.zip .
          cd ..
          mv lambda-function/lambda-code.zip .

      - name: Upload Lambda Code to S3
        run: |
          aws s3 cp lambda-code.zip s3://${{ secrets.LAMBDA_CODE_BUCKET }}/lambda-code.zip

      - name: Deploy Main CloudFormation Stack
        id: deploy_stack
        run: |
          aws cloudformation deploy \
            --template-file ./Resources/main.yaml \
            --stack-name ${{ secrets.MAIN_STACK_NAME }} \
            --parameter-overrides \
              VPCName=${{ secrets.VPC_NAME }} \
              LambdaFunctionName1=${{ secrets.LAMBDA_FUNCTION_NAME_1 }} \
              LambdaFunctionName2=${{ secrets.LAMBDA_FUNCTION_NAME_2 }} \
              LambdaFunctionName3=${{ secrets.LAMBDA_FUNCTION_NAME_3 }} \
              LambdaCodeBucket1=${{ secrets.LAMBDA_CODE_BUCKET_1 }} \
              LambdaCodeBucket2=${{ secrets.LAMBDA_CODE_BUCKET_2 }} \
              LambdaCodeBucket3=${{ secrets.LAMBDA_CODE_BUCKET_3 }} \
              LambdaCodeKey=${{ secrets.LAMBDA_CODE_KEY }} \
              EC2InstanceName=${{ secrets.EC2_INSTANCE_NAME }} \
              S3BucketNameCreate=${{ secrets.S3_BUCKET_NAME_CREATE }} \
              Environment=${{ secrets.ENVIRONMENT }} \
              AccessControl=${{ secrets.ACCESS_CONTROL }} \
              VersioningStatus=${{ secrets.VERSIONING_STATUS }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name ${{ secrets.MAIN_STACK_NAME }} --query "Stacks[0].Outputs")
          echo "outputs=$outputs" >> $GITHUB_ENV
          VPC_ID=$(echo $outputs | jq -r '.[] | select(.OutputKey=="VPCId") | .OutputValue')
          INSTANCE_ID=$(echo $outputs | jq -r '.[] | select(.OutputKey=="InstanceId") | .OutputValue')
          BUCKET_NAME=$(echo $outputs | jq -r '.[] | select(.OutputKey=="BucketName") | .OutputValue')
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Save VPC ID as artifact
        uses: actions/upload-artifact@v3
        with:
          name: vpc-id
          path: ${{ env.VPC_ID }}

      - name: Save EC2 Instance ID as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ec2-instance-id
          path: ${{ env.INSTANCE_ID }}

      - name: Save S3 Bucket Name as artifact
        uses: actions/upload-artifact@v3
        with:
          name: s3-bucket-name
          path: ${{ env.BUCKET_NAME }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
