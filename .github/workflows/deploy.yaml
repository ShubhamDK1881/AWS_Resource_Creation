name: Deploy AWS Resources using GitHub Actions

on:
  workflow_dispatch:
  push:
    branches:
      - Prod

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 19.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test
        
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if S3 Bucket Exists
        id: check_bucket
        run: |
          if aws s3 ls "s3://my-demo-s3-bucket-test-project-11" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "bucket_exists=false" >> $GITHUB_ENV
          else
            echo "bucket_exists=true" >> $GITHUB_ENV
          fi
      - name: Create S3 Bucket if Not Exists
        if: env.bucket_exists == 'false'
        run: |
          aws s3api create-bucket --bucket my-demo-s3-bucket-test-project-11 --region $AWS_REGION

      - name: Upload nested stack templates to S3
        run: |
          aws s3 cp ./Resources/vpc.yaml s3://my-demo-s3-bucket-test-project-11/vpc.yaml
          aws s3 cp ./Resources/s3.yaml s3://my-demo-s3-bucket-test-project-11/s3.yaml
          aws s3 cp ./Resources/ec2.yaml s3://my-demo-s3-bucket-test-project-11/ec2.yaml
          aws s3 cp ./Resources/iam-role.yaml s3://my-demo-s3-bucket-test-project-11/iam-role.yaml
          aws s3 cp ./Resources/parameters-dev.json s3://my-demo-s3-bucket-test-project-11/parameters-dev.json
          aws s3 cp ./Resources/parameters-prod.json s3://my-demo-s3-bucket-test-project-11/parameters-prod.json
      
      - name: Check if main stack is in ROLLBACK_COMPLETE state
        id: check_main_stack
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name main-stack --query "Stacks[0].StackStatus" --output text || echo "STACK_NOT_FOUND")
          echo "main Stack Status: $STACK_STATUS"
          echo "::set-output name=stack_status::$STACK_STATUS"

      - name: Delete main stack if main stack is in DELETE_IN_PROGRESS state
        if: steps.check_main_stack.outputs.stack_status == 'DELETE_IN_PROGRESS'
        run: |
          echo "Deleting main stack..."
          aws cloudformation wait stack-delete-complete --stack-name main-stack
          echo "Delete Complete..."
        
      - name: Delete main stack if main stack is in ROLLBACK_COMPLETE state
        if: steps.check_main_stack.outputs.stack_status == 'ROLLBACK_COMPLETE' || 'CREATE_COMPLETE'
        run: |
          echo "Deleting main stack..."
          aws cloudformation delete-stack --stack-name main-stack
          aws cloudformation wait stack-delete-complete --stack-name main-stack
          echo "Delete Complete..."
           
      - name: Deploy Main CloudFormation Stack
        id: deploy_stack
        run: |
          aws cloudformation deploy \
            --template-file ./Resources/main.yaml \
            --stack-name main-stack \
            --parameter-overrides \
              VPCName=dev-demo-vpc \
              EC2InstanceName=dev-demo-ec2-instance \
              S3BucketNameCreate=dev-demo-cloudformation-bucket \
              S3BucketName=my-demo-s3-bucket-test-project-18 \
              Environment=dev \
              AccessControl=Private \
              VersioningStatus=Enabled \
            --capabilities CAPABILITY_NAMED_IAM
  
      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name main-stack --query "Stacks[0].Outputs" --output json)
          echo "outputs=$(echo $outputs | jq -c .)" >> $GITHUB_ENV
  
      - name: Parse and Set Outputs
        run: |
          VPC_ID=$(echo $outputs | jq -r '.[] | select(.OutputKey=="VPCId") | .OutputValue')
          INSTANCE_ID=$(echo $outputs | jq -r '.[] | select(.OutputKey=="InstanceId") | .OutputValue')
          BUCKET_NAME=$(echo $outputs | jq -r '.[] | select(.OutputKey=="BucketName") | .OutputValue')
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
  
      - name: Save VPC ID as artifact
        run: echo ${{ env.VPC_ID }} > vpc-id.txt
  
      - name: Upload VPC ID artifact
        uses: actions/upload-artifact@v3
        with:
          name: vpc-id
          path: vpc-id.txt
  
      - name: Save EC2 Instance ID as artifact
        run: echo ${{ env.INSTANCE_ID }} > ec2-instance-id.txt
  
      - name: Upload EC2 Instance ID artifact
        uses: actions/upload-artifact@v3
        with:
          name: ec2-instance-id
          path: ec2-instance-id.txt
  
      - name: Save S3 Bucket Name as artifact
        run: echo ${{ env.BUCKET_NAME }} > s3-bucket-name.txt
  
      - name: Upload S3 Bucket Name artifact
        uses: actions/upload-artifact@v3
        with:
          name: s3-bucket-name
          path: s3-bucket-name.txt
  
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
  
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
  
      - name: Install dependencies
        run: npm install
        #run: npm ci
  
      - name: Run tests
        run: npm test